{"version":3,"sources":["Components/Square.jsx","Components/Board.jsx","Components/Status.jsx","Components/Moves.jsx","Components/Game.jsx","serviceWorker.js","index.js"],"names":["Square","props","value","moreClassName","other","type","className","onClick","Board","arrRows","Array","keys","this","cells","squares","squaresWinner","counter","map","row","key","toString","slice","cellID","includes","Component","Status","status","xIsNext","haveWinner","effect","Moves","history","stepNumber","content","createNewGame","sort","item","col","clickIndex","Math","floor","clickPosition","desc","btnHighlight","Game","handleClick","i","state","temp","recentlyChecked","tempHistory","push","length","unshift","setState","calculateWinner","fill","handleClickBtnMove","index","tempSquares","tempSquaresWinner","len","reverse","head1","head2","currentRow","nextPlayer","winner","shift","checkRow","checkColumn","checkSlash","checkBackSlash","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d45988f5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Square = (props) => {\r\n    const {value, moreClassName, ...other} = props;\r\n    return (\r\n         <button type=\"button\" className={`square ${value} ${moreClassName}`} onClick={() => other.onClick()}>\r\n            {value}\r\n         </button>\r\n    );\r\n}\r\n\r\nexport default Square;","import React, { Component } from 'react';\r\nimport Square from './Square';\r\n\r\nclass Board extends Component{\r\n    arrRows = [...Array(20).keys()];\r\n\r\n    render(){\r\n        const { cells, squares, squaresWinner, ...other } = this.props;\r\n        let counter = 1;\r\n        return (\r\n            <div className=\"board\">\r\n                {\r\n                    this.arrRows.map((row) => \r\n                        <div key={row.toString()} className=\"board-row\">\r\n                            {\r\n                                // eslint-disable-next-line no-plusplus\r\n                                cells.slice(row * 20, counter++ * 20)\r\n                                    .map((cellID) =>\r\n                                        <Square key={cellID.toString()}\r\n                                                value={squares[cellID]}\r\n                                                moreClassName={squaresWinner.includes(cellID)? 'winner' : ''}\r\n                                                onClick={() => other.onClick(cellID)}/>\r\n                                    )\r\n                            }\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\n\r\nconst Status = (props) => {\r\n    const {xIsNext, haveWinner} = props;\r\n    const effect = haveWinner? 'bounce' : '';\r\n    let status;\r\n\r\n    if (haveWinner){\r\n        status = `Winner is: ${xIsNext? 'o' : 'x'}`;\r\n    }else{\r\n        status = `Next player is: ${xIsNext? 'x' : 'o'}`;\r\n    }\r\n\r\n    return (  \r\n        <div className=\"game-info__status\">\r\n            <div className={`status ${effect}`}>{status}</div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Status;","import React from 'react';\r\n\r\nconst Moves = (props) => {\r\n    const {history, stepNumber, content, ...other} = props;\r\n        return ( \r\n            <div className=\"game-info__moves overflow-auto\">\r\n                <ol className=\"list-moves list-unstyled\">\r\n                    <li>\r\n                        <button type=\"button\" className=\"btn btn-danger btn-block\"\r\n                                onClick={() => other.createNewGame()}>\r\n                            New game\r\n                        </button>\r\n                    </li>\r\n                    <li>\r\n                    <button type=\"button\" className=\"btn btn-danger btn-block\"\r\n                                onClick={() => other.sort()}>\r\n                            {\r\n                                content\r\n                            }\r\n                        </button>\r\n                    </li>\r\n                    {\r\n                        history.map((item)=>{\r\n                            const col = item.clickIndex % 20;\r\n                            const row = Math.floor(item.clickIndex / 20);\r\n                            const clickPosition = `(row: ${row}, col: ${col})`;\r\n                            const desc = `Go to move #${item.stepNumber}${clickPosition}`;\r\n                            const btnHighlight = (item.stepNumber === stepNumber - 1) ? 'btn-primary' : 'btn-secondary';\r\n                            return (\r\n                                <li key={item.stepNumber}>\r\n                                    <button type=\"button\" \r\n                                            className={`btn ${btnHighlight} btn-block btn-custom`}\r\n                                            onClick={() => other.onClick(item.stepNumber)}>\r\n                                        {desc}\r\n                                    </button>\r\n                                </li>\r\n                            );\r\n                        })\r\n                    }\r\n                </ol>\r\n            </div>\r\n         );\r\n}\r\n\r\nexport default Moves;","import React, { Component } from 'react';\r\nimport Board from './Board';\r\nimport Status from './Status'\r\nimport Moves from './Moves';\r\n\r\nclass Game extends Component{\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state = {\r\n            squares: Array(400).fill(null),\r\n            xIsNext: true,\r\n            stepNumber: 0,\r\n            history: [],\r\n            squaresWinner: [],\r\n            haveWinner: false,\r\n            content: 'Increment'\r\n        };\r\n        this.recentlyChecked = 0;\r\n        this.haveWinner = false;\r\n        this.squaresWinner = [];\r\n    }\r\n\r\n    handleClick = (i) => {\r\n        if(this.haveWinner){\r\n            return;\r\n        }\r\n\r\n        const { squares, xIsNext, content, history, stepNumber } = this.state;\r\n        const temp = squares.slice();\r\n        \r\n        if (temp[i] != null){\r\n            return;\r\n        }\r\n\r\n        this.recentlyChecked = i;\r\n        temp[i] = xIsNext? 'x' : 'o';\r\n        let tempHistory = [];\r\n\r\n        if (content === 'Increment')\r\n        {\r\n            tempHistory = history.slice(0, stepNumber);\r\n            tempHistory.push({\r\n                value: temp[i],\r\n                clickIndex: i,\r\n                stepNumber\r\n            });\r\n        }else{\r\n            tempHistory = history.slice(history.length - stepNumber);\r\n            tempHistory.unshift({\r\n                value: temp[i],\r\n                clickIndex: i,\r\n                stepNumber\r\n            });\r\n        }\r\n        \r\n        this.setState({\r\n            squares: temp,\r\n            xIsNext: !xIsNext,\r\n            history: tempHistory,\r\n            stepNumber: stepNumber + 1\r\n        }, () => {\r\n            const haveWinner = this.calculateWinner();\r\n\r\n            if (haveWinner){\r\n                this.setState({\r\n                    haveWinner: true,\r\n                    squaresWinner: this.squaresWinner\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    createNewGame = () => {\r\n        this.squaresWinner = [];\r\n        this.haveWinner = false;\r\n        this.recentlyChecked = 0;\r\n        this.setState({\r\n            squares: Array(400).fill(null),\r\n            xIsNext: true,\r\n            stepNumber: 0,\r\n            history: [],\r\n            squaresWinner: [],\r\n            haveWinner: false\r\n        });\r\n    }\r\n\r\n    handleClickBtnMove = (index) => {\r\n        const tempSquares = Array(400).fill(null);\r\n        const { history, content } = this.state;\r\n        let tempSquaresWinner = [];\r\n        \r\n        if (content === 'Increment'){\r\n            for (let i = 0; i < index + 1; i += 1){\r\n                tempSquares[history[i].clickIndex] = history[i].value;\r\n            }\r\n\r\n            if (index === history.length - 1){\r\n                tempSquaresWinner = this.squaresWinner;\r\n            }\r\n\r\n            this.setState({\r\n                squares: tempSquares,\r\n                stepNumber: index + 1,\r\n                xIsNext: history[index].value !== 'x',\r\n                squaresWinner: tempSquaresWinner\r\n            });\r\n        }else{\r\n            const len = history.length;\r\n            for (let i = 0; i < index + 1; i += 1){\r\n                tempSquares[history[len - i - 1].clickIndex] = history[len - i - 1].value;\r\n            }\r\n            \r\n            if (history.length - index - 1 === 0){\r\n                tempSquaresWinner = this.squaresWinner;\r\n            }\r\n\r\n            this.setState({\r\n                squares: tempSquares,\r\n                stepNumber: index + 1,\r\n                xIsNext: history[len - index - 1].value !== 'x',\r\n                squaresWinner: tempSquaresWinner\r\n            });\r\n        }\r\n    }\r\n\r\n    sort = () => {\r\n        const { content, history } = this.state;\r\n\r\n        if (content === 'Increment'){\r\n            this.setState({\r\n                history: history.reverse(),\r\n                content: 'Decrement'\r\n            });\r\n        }else{\r\n            this.setState({\r\n                history: history.reverse(),\r\n                content: 'Increment'\r\n            });\r\n        }\r\n    }\r\n\r\n    // Kiểm tra hàng ngang\r\n    checkRow(){\r\n        let temp = 0;\r\n        let head1 = false;\r\n        let head2 = false;\r\n        let i = this.recentlyChecked;\r\n        const currentRow = Math.floor(i / 20);\r\n        const { xIsNext, squares } = this.state;\r\n        const nextPlayer = xIsNext ? 'x' : 'o';\r\n        const winner = [];\r\n\r\n        while (temp < 5){\r\n            if (squares[i] === null){\r\n                break;\r\n            }\r\n\r\n            if (squares[i] === nextPlayer){\r\n                head1 = true;\r\n                break;\r\n            }\r\n\r\n            temp += 1;\r\n\r\n            if (Math.floor((i - 1) / 20) !== currentRow){\r\n                head1 = true;\r\n                break;\r\n            }\r\n\r\n            if ((temp === 5) && (squares[i - 1] === nextPlayer)){\r\n                head1 = true;\r\n            }\r\n\r\n            winner.push(i);\r\n            i -= 1;\r\n        }\r\n\r\n        i = this.recentlyChecked;\r\n        winner.shift();\r\n\r\n        while (temp < 6){\r\n            if (squares[i] === null){\r\n                break;\r\n            }\r\n\r\n            if (squares[i] === nextPlayer){\r\n                head2 = true;\r\n                break;\r\n            }\r\n\r\n            temp += 1;\r\n\r\n            if (Math.floor((i + 1) / 20) !== currentRow){\r\n                head2 = true;\r\n                break;\r\n            }\r\n\r\n            if ((temp === 6) && (squares[i + 1] === nextPlayer)){\r\n                head2 = true;\r\n            }\r\n\r\n            winner.push(i);\r\n            i += 1;\r\n        }\r\n\r\n        if ((temp === 6) && !((head1 === true) && (head2 === true))){\r\n            this.squaresWinner = winner;\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    // Kiểm tra hàng dọc\r\n    checkColumn(){\r\n        let temp = 0;\r\n        let head1 = false;\r\n        let head2 = false;\r\n        let i = this.recentlyChecked;\r\n        const {xIsNext, squares} = this.state;\r\n        const  nextPlayer = xIsNext ? 'x' : 'o';\r\n        const winner = [];\r\n\r\n        while (temp < 5){\r\n            \r\n            if (squares[i] === null){\r\n                break;\r\n            }\r\n\r\n            if (squares[i] === nextPlayer){\r\n                head1 = true;\r\n                break;\r\n            }\r\n\r\n            temp += 1;\r\n\r\n            if (i - 20 < 0){\r\n                head1 = true;\r\n                break;\r\n            }\r\n\r\n            if ((temp === 5) && (squares[i - 20] === nextPlayer)){\r\n                head1 = true;\r\n            }\r\n\r\n            winner.push(i);\r\n            i -= 20;\r\n        }\r\n\r\n        i = this.recentlyChecked;\r\n        winner.shift();\r\n\r\n        while (temp < 6){\r\n            \r\n            if (squares[i] === null){\r\n                break;\r\n            }\r\n\r\n            if (squares[i] === nextPlayer){\r\n                head2 = true;\r\n                break;\r\n            }\r\n\r\n            temp += 1;\r\n\r\n            if (i + 20 > 399){\r\n                head2 = true;\r\n                break;\r\n            }\r\n\r\n            if ((temp === 6) && (squares[i + 20] === nextPlayer)){\r\n                head2 = true;\r\n            }\r\n\r\n            winner.push(i);\r\n            i += 20;\r\n        }\r\n\r\n        if ((temp === 6) && !((head1 === true) && (head2 === true))){\r\n            this.squaresWinner = winner;\r\n            return true;\r\n        }\r\n            \r\n        return false;\r\n    }\r\n\r\n    // Kiểm tra đường chéo trái sang phải\r\n    checkSlash(){\r\n        let temp = 0;\r\n        let head1 = false;\r\n        let head2 = false;\r\n        let i = this.recentlyChecked;\r\n        const {xIsNext, squares} = this.state;\r\n        const nextPlayer = xIsNext ? 'x' : 'o';\r\n        const winner = [];\r\n\r\n        while (temp < 5){\r\n            \r\n            if (squares[i] === null){\r\n                break;\r\n            }\r\n\r\n            if (squares[i] === nextPlayer){\r\n                head1 = true;\r\n                break;\r\n            }\r\n\r\n            temp += 1;\r\n\r\n            if (i - 21 < 0){\r\n                head1 = true;\r\n                break;\r\n            }\r\n\r\n            if ((temp === 5) && (squares[i - 21] === nextPlayer)){\r\n                head1 = true;\r\n            }\r\n\r\n            winner.push(i);\r\n            i -= 21;\r\n        }\r\n\r\n        i = this.recentlyChecked;\r\n        winner.shift();\r\n\r\n        while (temp < 6){\r\n            \r\n            if (squares[i] === null){\r\n                break;\r\n            }\r\n\r\n            if (squares[i] === nextPlayer){\r\n                head2 = true;\r\n                break;\r\n            }\r\n\r\n            temp += 1;\r\n\r\n            if (i + 21 > 399){\r\n                head2 = true;\r\n                break;\r\n            }\r\n\r\n            if ((temp === 6) && (squares[i + 21] === nextPlayer)){\r\n                head2 = true;\r\n            }\r\n\r\n            winner.push(i);\r\n            i += 21;\r\n        }\r\n\r\n        if ((temp === 6) && !((head1 === true) && (head2 === true))){\r\n            this.squaresWinner = winner;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // Kiểm tra đường chéo phải sang trái\r\n    checkBackSlash(){\r\n        let temp = 0;\r\n        let head1 = false;\r\n        let head2 = false;\r\n        let i = this.recentlyChecked;\r\n        const {xIsNext, squares} = this.state;\r\n        const nextPlayer = xIsNext ? 'x' : 'o';\r\n        const winner = [];\r\n\r\n        while (temp < 5){\r\n            \r\n            if (squares[i] === null){\r\n                break;\r\n            }\r\n\r\n            if (squares[i] === nextPlayer){\r\n                head1 = true;\r\n                break;\r\n            }\r\n\r\n            temp += 1;\r\n\r\n            if (i - 19 < 0){\r\n                head1 = true;\r\n                break;\r\n            }\r\n\r\n            if ((temp === 5) && (squares[i - 19] === nextPlayer)){\r\n                head1 = true;\r\n            }\r\n\r\n            winner.push(i);\r\n            i -= 19;\r\n        }\r\n\r\n        i = this.recentlyChecked;\r\n        winner.shift();\r\n\r\n        while (temp < 6){\r\n            \r\n            if (squares[i] === null){\r\n                break;\r\n            }\r\n\r\n            if (squares[i] === nextPlayer){\r\n                head2 = true;\r\n                break;\r\n            }\r\n\r\n            temp += 1;\r\n\r\n            if (i + 19 > 399){\r\n                head2 = true;\r\n                break;\r\n            }\r\n\r\n            if ((temp === 6) && (squares[i + 19] === nextPlayer)){\r\n                head2 = true;\r\n            }\r\n\r\n            winner.push(i);\r\n            i += 19;\r\n        }\r\n\r\n        if ((temp === 6) && !((head1 === true) && (head2 === true))){\r\n            this.squaresWinner = winner;\r\n            return true;\r\n        }\r\n            \r\n        return false;\r\n    }\r\n\r\n    // Kiểm tra xem người chơi hiện tại có thắng không\r\n    calculateWinner(){\r\n        if (this.checkRow()){\r\n            this.haveWinner = true;\r\n            return true;\r\n        }\r\n\r\n        if (this.checkColumn()){\r\n            this.haveWinner = true;\r\n            return true;\r\n        }\r\n\r\n        if (this.checkSlash()){\r\n            this.haveWinner = true;\r\n            return true;\r\n        }\r\n\r\n        if (this.checkBackSlash()){\r\n            this.haveWinner = true;\r\n            return true;\r\n        }\r\n\r\n        this.haveWinner = false;\r\n        return false;\r\n    }\r\n\r\n    render(){\r\n        const cells = [...Array(400).keys()];\r\n        const { squares, squaresWinner, xIsNext, haveWinner, history, stepNumber, content } = this.state;\r\n\r\n        return(\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board cells={cells} \r\n                            squares={squares}\r\n                            squaresWinner={squaresWinner}\r\n                            onClick={this.handleClick}/>\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <Status xIsNext={xIsNext}\r\n                            haveWinner={haveWinner}/>\r\n                    <Moves createNewGame={this.createNewGame}\r\n                            history={history}\r\n                            stepNumber={stepNumber}\r\n                            onClick={this.handleClickBtnMove}\r\n                            content={content}\r\n                            sort={this.sort} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;","/* eslint-disable no-undef */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-console */\n/* eslint-disable no-use-before-define */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Game from './Components/Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}