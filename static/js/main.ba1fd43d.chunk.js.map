{"version":3,"sources":["components/Square.jsx","components/Board.jsx","components/Status.jsx","components/Moves.jsx","actions/GameAction.js","containers/Game.jsx","serviceWorker.js","reducers/GameReducer.js","store.js","index.js"],"names":["Square","props","value","moreClassName","other","type","className","onClick","Board","arrRows","Array","keys","cells","squares","squaresWinner","counter","map","row","key","toString","slice","cellID","includes","Status","status","xIsNext","haveWinner","effect","Moves","history","stepNumber","content","createNewGame","sort","item","col","clickIndex","Math","floor","clickPosition","desc","btnHighlight","GameAction","payload","fill","oldSquaresWinner","clickSquare","i","jumpToStepNumber","connect","state","dispatch","jumToStepNumber","console","log","Boolean","window","location","hostname","match","initialState","calculateWinner","indexClick","result","temp","head1","head2","currentRow","nextPlayer","winner","push","shift","checkRow","checkColumn","checkSlash","checkBackSlash","tempHistory","length","unshift","calculteResult","index","tempSquares","tempSquaresWinner","len","reverse","GameReducer","action","Store","createStore","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba1fd43d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Square = (props) => {\r\n    const {value, moreClassName, ...other} = props;\r\n    return (\r\n         <button type=\"button\" className={`square ${value} ${moreClassName}`} onClick={() => other.onClick()}>\r\n            {value}\r\n         </button>\r\n    );\r\n}\r\n\r\nexport default Square;","import React from 'react';\r\nimport Square from './Square';\r\n\r\nconst Board = (props) => {\r\n    const arrRows = [...Array(20).keys()];\r\n    const { cells, squares, squaresWinner, ...other } = props;\r\n    let counter = 1;\r\n    return (\r\n        <div className=\"board\">\r\n            {\r\n                arrRows.map((row) => \r\n                    <div key={row.toString()} className=\"board-row\">\r\n                        {\r\n                            // eslint-disable-next-line no-plusplus\r\n                            cells.slice(row * 20, counter++ * 20)\r\n                                .map((cellID) =>\r\n                                    <Square key={cellID.toString()}\r\n                                            value={squares[cellID]}\r\n                                            moreClassName={squaresWinner.includes(cellID)? 'winner' : ''}\r\n                                            onClick={() => other.onClick(cellID)}/>\r\n                                )\r\n                        }\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\n\r\nconst Status = (props) => {\r\n    const {xIsNext, haveWinner} = props;\r\n    const effect = haveWinner? 'bounce' : '';\r\n    let status;\r\n\r\n    if (haveWinner){\r\n        status = `Winner is: ${xIsNext? 'o' : 'x'}`;\r\n    }else{\r\n        status = `Next player is: ${xIsNext? 'x' : 'o'}`;\r\n    }\r\n\r\n    return (  \r\n        <div className=\"game-info__status\">\r\n            <div className={`status ${effect}`}>{status}</div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Status;","import React from 'react';\r\n\r\nconst Moves = (props) => {\r\n    const {history, stepNumber, content, ...other} = props;\r\n    return ( \r\n        <div className=\"game-info__moves overflow-auto\">\r\n            <ol className=\"list-moves list-unstyled\">\r\n                <li>\r\n                    <button type=\"button\" className=\"btn btn-danger btn-block\"\r\n                            onClick={() => other.createNewGame()}>\r\n                        New game\r\n                    </button>\r\n                </li>\r\n                <li>\r\n                <button type=\"button\" className=\"btn btn-danger btn-block\"\r\n                            onClick={() => other.sort()}>\r\n                        {\r\n                            content\r\n                        }\r\n                    </button>\r\n                </li>\r\n                {\r\n                    history.map((item)=>{\r\n                        const col = item.clickIndex % 20;\r\n                        const row = Math.floor(item.clickIndex / 20);\r\n                        const clickPosition = `(row: ${row}, col: ${col})`;\r\n                        const desc = `Go to move #${item.stepNumber}${clickPosition}`;\r\n                        const btnHighlight = (item.stepNumber === stepNumber - 1) ? 'btn-primary' : 'btn-secondary';\r\n                        return (\r\n                            <li key={item.stepNumber}>\r\n                                <button type=\"button\" \r\n                                        className={`btn ${btnHighlight} btn-block btn-custom`}\r\n                                        onClick={() => other.onClick(item.stepNumber)}>\r\n                                    {desc}\r\n                                </button>\r\n                            </li>\r\n                        );\r\n                    })\r\n                }\r\n            </ol>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Moves;","const GameAction = {\r\n    createNewGame: () => ({\r\n        type: 'NEW_GAME',\r\n        payload: {\r\n            squares: Array(400).fill(null),\r\n            xIsNext: true,\r\n            stepNumber: 0,\r\n            history: [],\r\n            squaresWinner: [],\r\n            haveWinner: false,\r\n            oldSquaresWinner: []\r\n        }\r\n    }),\r\n\r\n    clickSquare: (i) => ({\r\n        type: 'CLICK_SQUARE',\r\n        payload: i\r\n    }),\r\n\r\n    jumpToStepNumber: (i) => ({\r\n        type: 'JUMP',\r\n        payload: i\r\n    }),\r\n\r\n    sort: () => ({ type: 'SORT' })\r\n};\r\n\r\nexport default GameAction;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Board from '../components/Board';\r\nimport Status from '../components/Status'\r\nimport Moves from '../components/Moves';\r\nimport GameAction from '../actions/GameAction';\r\n\r\nconst Game = (props) => {\r\n    console.log(props.xIsNext);\r\n    const cells = [...Array(400).keys()];\r\n    const { squares, squaresWinner, xIsNext, haveWinner, history, stepNumber, content, ...other } = props;\r\n\r\n    return(\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n                <Board cells={cells} \r\n                        squares={squares}\r\n                        squaresWinner={squaresWinner}\r\n                        onClick={other.clickSquare}/>\r\n            </div>\r\n            <div className=\"game-info\">\r\n                <Status xIsNext={xIsNext}\r\n                        haveWinner={haveWinner}/>\r\n                <Moves createNewGame={other.createNewGame}\r\n                        history={history}\r\n                        stepNumber={stepNumber}\r\n                        onClick={other.jumToStepNumber}\r\n                        content={content}\r\n                        sort={other.sort} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state;\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    createNewGame: () => {\r\n        dispatch(GameAction.createNewGame());\r\n    },\r\n\r\n    clickSquare: (i) => {\r\n        dispatch(GameAction.clickSquare(i));\r\n    },\r\n\r\n    jumToStepNumber: (i) => {\r\n        dispatch(GameAction.jumpToStepNumber(i));\r\n    },\r\n\r\n    sort: () => {\r\n        dispatch(GameAction.sort());\r\n    }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","/* eslint-disable no-undef */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-console */\n/* eslint-disable no-use-before-define */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n    squares: Array(400).fill(null),\r\n    xIsNext: true,\r\n    stepNumber: 0,\r\n    history: [],\r\n    squaresWinner: [],\r\n    haveWinner: false,\r\n    content: 'Increment',\r\n    oldSquaresWinner: []\r\n};\r\n\r\n// Kiểm tra hàng ngang\r\nfunction checkRow(state, indexClick){\r\n    let temp = 0;\r\n    let head1 = false;\r\n    let head2 = false;\r\n    let i = indexClick;\r\n    const currentRow = Math.floor(i / 20);\r\n    const { xIsNext, squares } = state;\r\n    const nextPlayer = xIsNext ? 'x' : 'o';\r\n    const winner = [];\r\n\r\n    while (temp < 5){\r\n        if (squares[i] === null){\r\n            break;\r\n        }\r\n\r\n        if (squares[i] === nextPlayer){\r\n            head1 = true;\r\n            break;\r\n        }\r\n\r\n        temp += 1;\r\n\r\n        if (Math.floor((i - 1) / 20) !== currentRow){\r\n            head1 = true;\r\n            break;\r\n        }\r\n\r\n        if ((temp === 5) && (squares[i - 1] === nextPlayer)){\r\n            head1 = true;\r\n        }\r\n\r\n        winner.push(i);\r\n        i -= 1;\r\n    }\r\n\r\n    i = indexClick;\r\n    winner.shift();\r\n\r\n    while (temp < 6){\r\n        if (squares[i] === null){\r\n            break;\r\n        }\r\n\r\n        if (squares[i] === nextPlayer){\r\n            head2 = true;\r\n            break;\r\n        }\r\n\r\n        temp += 1;\r\n\r\n        if (Math.floor((i + 1) / 20) !== currentRow){\r\n            head2 = true;\r\n            break;\r\n        }\r\n\r\n        if ((temp === 6) && (squares[i + 1] === nextPlayer)){\r\n            head2 = true;\r\n        }\r\n\r\n        winner.push(i);\r\n        i += 1;\r\n    }\r\n\r\n    if ((temp === 6) && !((head1 === true) && (head2 === true))){\r\n        return {\r\n            result: true,\r\n            squaresWinner: winner\r\n        }\r\n    }\r\n    \r\n    return {\r\n        result: false\r\n    };\r\n}\r\n\r\n// Kiểm tra hàng dọc\r\nfunction checkColumn(state, indexClick){\r\n    let temp = 0;\r\n    let head1 = false;\r\n    let head2 = false;\r\n    let i = indexClick;\r\n    const {xIsNext, squares} = state;\r\n    const  nextPlayer = xIsNext ? 'x' : 'o';\r\n    const winner = [];\r\n\r\n    while (temp < 5){\r\n        \r\n        if (squares[i] === null){\r\n            break;\r\n        }\r\n\r\n        if (squares[i] === nextPlayer){\r\n            head1 = true;\r\n            break;\r\n        }\r\n\r\n        temp += 1;\r\n\r\n        if (i - 20 < 0){\r\n            head1 = true;\r\n            break;\r\n        }\r\n\r\n        if ((temp === 5) && (squares[i - 20] === nextPlayer)){\r\n            head1 = true;\r\n        }\r\n\r\n        winner.push(i);\r\n        i -= 20;\r\n    }\r\n\r\n    i = indexClick;\r\n    winner.shift();\r\n\r\n    while (temp < 6){\r\n        \r\n        if (squares[i] === null){\r\n            break;\r\n        }\r\n\r\n        if (squares[i] === nextPlayer){\r\n            head2 = true;\r\n            break;\r\n        }\r\n\r\n        temp += 1;\r\n\r\n        if (i + 20 > 399){\r\n            head2 = true;\r\n            break;\r\n        }\r\n\r\n        if ((temp === 6) && (squares[i + 20] === nextPlayer)){\r\n            head2 = true;\r\n        }\r\n\r\n        winner.push(i);\r\n        i += 20;\r\n    }\r\n\r\n    if ((temp === 6) && !((head1 === true) && (head2 === true))){\r\n        return {\r\n            result: true,\r\n            squaresWinner: winner\r\n        }\r\n    }\r\n        \r\n    return {\r\n        result: false\r\n    }\r\n}\r\n\r\n// Kiểm tra đường chéo trái sang phải\r\nfunction checkSlash(state, indexClick){\r\n    let temp = 0;\r\n    let head1 = false;\r\n    let head2 = false;\r\n    let i = indexClick;\r\n    const {xIsNext, squares} = state;\r\n    const nextPlayer = xIsNext ? 'x' : 'o';\r\n    const winner = [];\r\n\r\n    while (temp < 5){\r\n        \r\n        if (squares[i] === null){\r\n            break;\r\n        }\r\n\r\n        if (squares[i] === nextPlayer){\r\n            head1 = true;\r\n            break;\r\n        }\r\n\r\n        temp += 1;\r\n\r\n        if (i - 21 < 0){\r\n            head1 = true;\r\n            break;\r\n        }\r\n\r\n        if ((temp === 5) && (squares[i - 21] === nextPlayer)){\r\n            head1 = true;\r\n        }\r\n\r\n        winner.push(i);\r\n        i -= 21;\r\n    }\r\n\r\n    i = indexClick;\r\n    winner.shift();\r\n\r\n    while (temp < 6){\r\n        \r\n        if (squares[i] === null){\r\n            break;\r\n        }\r\n\r\n        if (squares[i] === nextPlayer){\r\n            head2 = true;\r\n            break;\r\n        }\r\n\r\n        temp += 1;\r\n\r\n        if (i + 21 > 399){\r\n            head2 = true;\r\n            break;\r\n        }\r\n\r\n        if ((temp === 6) && (squares[i + 21] === nextPlayer)){\r\n            head2 = true;\r\n        }\r\n\r\n        winner.push(i);\r\n        i += 21;\r\n    }\r\n\r\n    if ((temp === 6) && !((head1 === true) && (head2 === true))){\r\n        return {\r\n            result: true,\r\n            squaresWinner: winner\r\n        }\r\n    }\r\n\r\n    return {\r\n        result: false\r\n    }\r\n}\r\n\r\n// Kiểm tra đường chéo phải sang trái\r\nfunction checkBackSlash(state, indexClick){\r\n    let temp = 0;\r\n    let head1 = false;\r\n    let head2 = false;\r\n    let i = indexClick;\r\n    const {xIsNext, squares} = state;\r\n    const nextPlayer = xIsNext ? 'x' : 'o';\r\n    const winner = [];\r\n\r\n    while (temp < 5){\r\n        \r\n        if (squares[i] === null){\r\n            break;\r\n        }\r\n\r\n        if (squares[i] === nextPlayer){\r\n            head1 = true;\r\n            break;\r\n        }\r\n\r\n        temp += 1;\r\n\r\n        if (i - 19 < 0){\r\n            head1 = true;\r\n            break;\r\n        }\r\n\r\n        if ((temp === 5) && (squares[i - 19] === nextPlayer)){\r\n            head1 = true;\r\n        }\r\n\r\n        winner.push(i);\r\n        i -= 19;\r\n    }\r\n\r\n    i = indexClick;\r\n    winner.shift();\r\n\r\n    while (temp < 6){\r\n        \r\n        if (squares[i] === null){\r\n            break;\r\n        }\r\n\r\n        if (squares[i] === nextPlayer){\r\n            head2 = true;\r\n            break;\r\n        }\r\n\r\n        temp += 1;\r\n\r\n        if (i + 19 > 399){\r\n            head2 = true;\r\n            break;\r\n        }\r\n\r\n        if ((temp === 6) && (squares[i + 19] === nextPlayer)){\r\n            head2 = true;\r\n        }\r\n\r\n        winner.push(i);\r\n        i += 19;\r\n    }\r\n\r\n    if ((temp === 6) && !((head1 === true) && (head2 === true))){\r\n        return {\r\n            result: true,\r\n            squaresWinner: winner\r\n        }\r\n    }\r\n        \r\n    return {\r\n        result: false\r\n    };\r\n}\r\n\r\n// Hàm tính toán xem người có người win không\r\n// Kiểm tra xem người chơi hiện tại có thắng không\r\nfunction calculateWinner(state, indexClick){\r\n    let result = checkRow(state, indexClick);\r\n\r\n    if (result.result){\r\n        return result;\r\n    }\r\n\r\n    result = checkColumn(state, indexClick);\r\n    if (result.result){\r\n        return result;\r\n    }\r\n\r\n    result = checkSlash(state, indexClick);\r\n    if (result.result){\r\n        return result;\r\n    }\r\n\r\n    return checkBackSlash(state, indexClick);\r\n}\r\n\r\n// Xử lí khi click một ô trên bàn cờ\r\nfunction clickSquare(state, i){\r\n    const { squares, xIsNext, content, history, stepNumber, haveWinner } = state;\r\n\r\n    // Nếu đã có người win thì không xử lí tiếp nữa\r\n    if(haveWinner){\r\n        return null;\r\n    }\r\n\r\n    const temp = squares.slice();\r\n    \r\n    // Nếu ô vừa click đã kích trước đó thì không xử lí nữa\r\n    if (temp[i] != null){\r\n        return null;\r\n    }\r\n\r\n    // Gán ký tự đại diện cho lượt người chơi vào ô được click\r\n    temp[i] = xIsNext? 'x' : 'o';\r\n    let tempHistory = [];\r\n\r\n    // Nếu danh sách nước đi đang được sắp xếp tăng dần...\r\n    if (content === 'Increment')\r\n    {\r\n        // Chèn nước đi với vào cuối danh sách nước đi\r\n        tempHistory = history.slice(0, stepNumber);\r\n        tempHistory.push({\r\n            value: temp[i],\r\n            clickIndex: i,\r\n            stepNumber\r\n        });\r\n    // Ngược lại thì...\r\n    }else{\r\n        // Chèn nước đi vào đầu danh sách nước đi\r\n        tempHistory = history.slice(history.length - stepNumber);\r\n        tempHistory.unshift({\r\n            value: temp[i],\r\n            clickIndex: i,\r\n            stepNumber\r\n        });\r\n    }\r\n\r\n    // Kết quả state tạm thời\r\n    const result = {\r\n        squares: temp,\r\n        xIsNext: !xIsNext,\r\n        history: tempHistory,\r\n        stepNumber: stepNumber + 1\r\n    };\r\n\r\n    const calculteResult = calculateWinner({...result}, i);\r\n    \r\n    if (calculteResult.result){\r\n        result.haveWinner = true;\r\n        result.squaresWinner = calculteResult.squaresWinner;\r\n        result.oldSquaresWinner = calculteResult.squaresWinner;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction jumpToStepNumber(state, index){\r\n    const tempSquares = Array(400).fill(null);\r\n    const { history, content, oldSquaresWinner, haveWinner, xIsNext } = state;\r\n    let tempSquaresWinner = [];\r\n    \r\n    if (content === 'Increment'){\r\n        for (let i = 0; i < index + 1; i += 1){\r\n            tempSquares[history[i].clickIndex] = history[i].value;\r\n        }\r\n\r\n        if (index === history.length - 1){\r\n            tempSquaresWinner = oldSquaresWinner;\r\n        }\r\n\r\n        let temp = history[index].value !== 'x';\r\n        temp = haveWinner? xIsNext : temp;\r\n\r\n        return ({\r\n            squares: tempSquares,\r\n            stepNumber: index + 1,\r\n            xIsNext: temp,\r\n            squaresWinner: tempSquaresWinner\r\n        });\r\n    }\r\n\r\n    const len = history.length;\r\n\r\n    for (let i = 0; i < index + 1; i += 1){\r\n        tempSquares[history[len - i - 1].clickIndex] = history[len - i - 1].value;\r\n    }\r\n    \r\n    if (history.length - index - 1 === 0){\r\n        tempSquaresWinner = oldSquaresWinner;\r\n    }\r\n\r\n    let temp = history[len - index - 1].value !== 'x';\r\n    temp = haveWinner? xIsNext : temp;\r\n\r\n\r\n    return ({\r\n        squares: tempSquares,\r\n        stepNumber: index + 1,\r\n        xIsNext: temp,\r\n        squaresWinner: tempSquaresWinner\r\n    });\r\n}\r\n\r\nfunction sort(state){\r\n    const { content, history } = state;\r\n\r\n    if (content === 'Increment'){\r\n        return ({\r\n            history: history.reverse(),\r\n            content: 'Decrement'\r\n        });\r\n    }\r\n\r\n    return ({\r\n        history: history.reverse(),\r\n        content: 'Increment'\r\n    });\r\n}\r\n\r\nconst GameReducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n        case 'NEW_GAME':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n        case 'CLICK_SQUARE':\r\n            return {\r\n                ...state,\r\n                ...clickSquare(state, action.payload)\r\n            };\r\n        case 'JUMP':\r\n            return {\r\n                ...state,\r\n                ...jumpToStepNumber(state, action.payload)\r\n            };\r\n        case 'SORT':\r\n            return {\r\n                ...state,\r\n                ...sort(state)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default GameReducer;","import { createStore } from 'redux';\r\nimport GameReducer  from './reducers/GameReducer';\r\n\r\nconst Store = createStore(GameReducer);\r\n\r\nexport default Store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport Game from './containers/Game'\nimport * as serviceWorker from './serviceWorker';\nimport Store from './store';\n\n// eslint-disable-next-line import/imports-first\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nReactDOM.render(\n    <Provider store={Store}>\n        <Game />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}